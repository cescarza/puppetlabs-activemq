<beans
  xmlns="http://www.springframework.org/schema/beans"
  xmlns:amq="http://activemq.apache.org/schema/core"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
  http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd
  http://activemq.apache.org/camel/schema/spring http://activemq.apache.org/camel/schema/spring/camel-spring.xsd">

<% if @webconsole_real -%>
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <value>file:${activemq.base}/conf/credentials.properties</value>
        </property>
    </bean>
<% end -%>

    <broker xmlns="http://activemq.apache.org/schema/core" brokerName="<%= @mq_broker_name %>" dataDirectory="${activemq.base}/data">
        <!--
          For better performances use VM cursor and small memory limit.
          For more information, see:
            
          http://activemq.apache.org/message-cursors.html
            
          Also, if your producer is "hanging", it's probably due to producer 
          flow control.

          For more information, see:
          http://activemq.apache.org/producer-flow-control.html
        -->
              
        <destinationPolicy>
            <policyMap>
              <policyEntries>
                <policyEntry queue=">" producerFlowControl="false">
                    <deadLetterStrategy>
                        <individualDeadLetterStrategy queuePrefix="DLQ." useQueueForQueueMessages="true" />
                    </deadLetterStrategy>
                </policyEntry>
              </policyEntries>
            </policyMap>
        </destinationPolicy> 

        <!-- 
          The managementContext is used to configure how ActiveMQ is exposed in 
          JMX. By default, ActiveMQ uses the MBean server that is started by 
          the JVM. For more information, see: 
            
          http://activemq.apache.org/jmx.html 
        -->
        <managementContext>
            <managementContext createConnector="false"/>
        </managementContext>

        <!--
          Configure network connectors for a network of brokers. 
          In this config, all brokers are connected to each other.
        -->

<% if @mq_cluster_brokers_real.length > 1 -%>
        <networkConnectors>
  <%- @mq_cluster_brokers_real.each do |broker| -%>
    <%- if broker != mq_broker_name -%>
            <networkConnector uri="static:(tcp://<%= broker %>:61616)" duplex="true" />
    <%- end -%>
  <%- end -%>
        </networkConnectors>
<%- end -%>

        <!--
          Configure message persistence for the broker. The default persistence
          mechanism is the KahaDB store (identified by the kahaDB tag). 
          For more information, see: 
            
          http://activemq.apache.org/persistence.html 
        -->
        <persistenceAdapter>
            <kahaDB directory="${activemq.base}/data/kahadb"/>
        </persistenceAdapter>
        
        <plugins>
          <!--
            Enable the statisticsBrokerPlugin to allow ActiveMQ to collect
            statistics.
          -->
          <statisticsBrokerPlugin/>
        </plugins>

        <!--
          The systemUsage controls the maximum amount of space the broker will 
          use before slowing down producers. For more information, see:
          
          http://activemq.apache.org/producer-flow-control.html
        -->
        <systemUsage>
            <systemUsage sendFailIfNoSpaceAfterTimeout="5000">
                <memoryUsage>
                    <memoryUsage limit="1200 mb"/>
                </memoryUsage>
                <storeUsage>
                    <storeUsage limit="5 gb"/>
                </storeUsage>
                <tempUsage>
                    <tempUsage limit="100 mb"/>
                </tempUsage>
            </systemUsage>
        </systemUsage>
		  
        <!-- 
          The transport connectors expose ActiveMQ over a given protocol to
          clients and other brokers. For more information, see: 
            
          http://activemq.apache.org/configuring-transports.html 
        -->
        <transportConnectors>
              <transportConnector name="stomp+nio" uri="stomp+nio://0.0.0.0:61613" updateClusterClients="true" updateClusterClientsOnRemove="true" rebalanceClusterClients="true"/>
        </transportConnectors>
    </broker>

<% if @webconsole_real -%>
      <import resource="jetty.xml"/>
<% end -%>
</beans>
